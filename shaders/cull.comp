#version 460
#include <common.glsl>

layout (local_size_x = 256) in;

struct IndirectDrawCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;

    uint batchCount;

    uint padding0;
    uint padding1;
};

struct Mesh {
    float sphereBounds;
    uint firstIndex;
    uint indexCount;
    int vertexOffset;
};

layout(std140, set = 1, binding = 0) readonly buffer MeshesBuffer {
    Mesh meshes[];
} meshesBuffer;

layout(std140, set = 1, binding = 1) buffer IndirectBuffer {
	IndirectDrawCommand commands[];
} indirectBuffer;


bool checkFrustum(uint objectIndex) {
    Object object = objectBuffer.objects[objectIndex];
    Mesh mesh = meshesBuffer.meshes[object.mesh];
    mat4 transform = object.transform;
    float scale = max(transform[0][0], max(transform[1][1], transform[2][2]));
    float radius = mesh.sphereBounds * scale;
    vec4 center = object.transform * vec4(0.0, 0.0, 0.0, 1.0);
    vec3 centerInFrustumSpace = (inverse(globalUniform.cameraTransform) * center).xyz;

    vec3 nearPlanePosition = vec3(0, 0, globalUniform.near);
    vec3 farPlanePosition = vec3(0, 0, globalUniform.far);

    return dot(centerInFrustumSpace - vec3(0, 0, -radius) - nearPlanePosition, globalUniform.frustumNearNormal.xyz) > 0.0
        && dot(centerInFrustumSpace - vec3(0, 0, radius) - farPlanePosition, globalUniform.frustumFarNormal.xyz) > 0.0
        && dot(centerInFrustumSpace + globalUniform.frustumTopNormal.xyz * radius, globalUniform.frustumTopNormal.xyz) > 0.0
        && dot(centerInFrustumSpace + globalUniform.frustumBottomNormal.xyz * radius, globalUniform.frustumBottomNormal.xyz) > 0.0
        && dot(centerInFrustumSpace + globalUniform.frustumLeftNormal.xyz * radius, globalUniform.frustumLeftNormal.xyz) > 0.0
        && dot(centerInFrustumSpace + globalUniform.frustumRightNormal.xyz * radius, globalUniform.frustumRightNormal.xyz) > 0.0;
}

bool IsVisible(uint objectIndex)
{
    return checkFrustum(objectIndex);
}


void main() {
	uint gID = gl_GlobalInvocationID.x;
    if (gID >= globalUniform.renderablesCount) return;
    Object object = objectBuffer.objects[gID];
    Mesh mesh = meshesBuffer.meshes[object.mesh];

    uint batch = object.batch;
    if (IsVisible(gID)) {
        indirectBuffer.commands[batch].indexCount = mesh.indexCount;
        uint objectSlot = atomicAdd(indirectBuffer.commands[batch].instanceCount, 1);
        indirectBuffer.commands[batch].firstIndex = mesh.firstIndex;
        indirectBuffer.commands[batch].vertexOffset = mesh.vertexOffset;
        indirectBuffer.commands[batch].firstInstance = objectBuffer.objects[batch].firstInstance;
        indirectBuffer.commands[batch].batchCount = 1;

        objectBuffer.objects[objectBuffer.objects[batch].firstInstance +  objectSlot].redirect = gID;
    }
}
